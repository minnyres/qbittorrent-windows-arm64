name: Build for Windows ARM64

on:
  push:

jobs:
  build-windows-arm64:
    name: Build
    runs-on: windows-latest
    env:
      boost_path: "${{ github.workspace }}/../boost"
      libtorrent_path: "${{ github.workspace }}/libtorrent-msvc-arm64"
      qt_path: "${{ github.workspace }}/../qt-msvc-arm64"
      libt_version: "2.0.10"
      qbt_version: "5.0.3"
      qt_version: "6.7.3"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64

      - name: Install build tools
        run: |
          choco install ninja

      # use the preinstalled vcpkg from image
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#package-management
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: C:/vcpkg
          doNotUpdateVcpkg: true  # the preinstalled vcpkg is updated regularly

      - name: Install dependencies from vcpkg
        run: |
          # clear buildtrees after each package installation to reduce disk space requirements
          echo "set(VCPKG_BUILD_TYPE release)" >> "${{ env.RUNVCPKG_VCPKG_ROOT }}\triplets\community\arm64-windows-static-md.cmake"
          $packages = `
            "openssl:arm64-windows-static-md",
            "zlib:arm64-windows-static-md"
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe upgrade `
            --no-dry-run
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install `
            --clean-after-build `
            $packages

      - name: Install boost
        run: |
          aria2c `
            "https://boostorg.jfrog.io/artifactory/main/release/1.87.0/source/boost_1_87_0.7z" `
            -d "${{ runner.temp }}" `
            -o "boost.7z"
          7z x "${{ runner.temp }}/boost.7z" -o"${{ github.workspace }}/.."
          move "${{ github.workspace }}/../boost_*" "${{ env.boost_path }}"

      - name: Install Qt (host x64)
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '${{ env.qt_version }}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'

      - name: Install Qt (arm64)
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '${{ env.qt_version }}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_arm64'

      - name: Install libtorrent
        run: |
          git clone `
            --branch v${{ env.libt_version }} `
            --depth 1 `
            --recurse-submodules `
            https://github.com/arvidn/libtorrent.git
          cd libtorrent
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${{ env.libtorrent_path }}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}" `
            -DBUILD_SHARED_LIBS=OFF `
            -Ddeprecated-functions=OFF `
            -Dstatic_runtime=ON `
            -DVCPKG_TARGET_TRIPLET=arm64-windows-static-md
          cmake --build build
          cmake --install build
          
      - name: Build qBittorrent
        run: |
          $env:path = "C:/Qt/${{ env.qt_version }}/msvc2019_arm64/bin;$env:path"
          $env:LDFLAGS+=" /FORCE:MULTIPLE"
          aria2c http://prdownloads.sourceforge.net/qbittorrent/qbittorrent/qbittorrent-${{ env.qbt_version }}/qbittorrent-${{ env.qbt_version }}.tar.gz
          tar -xf qbittorrent-${{ env.qbt_version }}.tar.gz
          cd qbittorrent-${{ env.qbt_version }}
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}" `
            -DLibtorrentRasterbar_DIR="${{ env.libtorrent_path }}/lib/cmake/LibtorrentRasterbar" `
            -DMSVC_RUNTIME_DYNAMIC=OFF `
            -DSTACKTRACE=ON `
            -DQT6=ON `
            -DVCPKG_TARGET_TRIPLET=arm64-windows-static-md
          cmake --build build

      - name: Prepare build artifacts
        run: |
          mkdir upload
          copy qbittorrent-${{ env.qbt_version }}/build/qbittorrent.exe upload
          copy qbittorrent-${{ env.qbt_version }}/dist/windows/qt.conf upload
          cd upload
          7z a qbittorrent_${{ env.qbt_version }}_arm64.zip *
          mv qbittorrent_${{ env.qbt_version }}_arm64.zip ..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qBittorrent_${{ env.qbt_version }}_arm64
          path: upload
     
      - name: Batch release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: qbittorrent_${{ env.qbt_version }}_arm64.zip
